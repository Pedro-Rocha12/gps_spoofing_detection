#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import os
import logging
import pandas as pd
import multiprocessing as mp
import signal
import sys
from typing import Dict

import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
from connect_opensky import get_cursor
from queries_opensky import query_state_vectors_for_flight

# Configura√ß√£o b√°sica de logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)
logger = logging.getLogger(__name__)


def _processar_um_voo(flight: Dict[str, str], tracks_dir: str) -> None:
    """
    Fun√ß√£o executada no processo filho para extrair state vectors de um voo.

    Par√¢metros:
        flight: dicion√°rio com as chaves:
            "icao24", "callsign", "estdepartureairport", "estarrivalairport", 
            "firstseen", "lastseen"
        tracks_dir: diret√≥rio onde ser√° salvo o CSV resultante de state vectors.
    Comportamento:
        - Conecta ao Trino (via get_cursor)
        - Monta a SQL usando query_state_vectors_for_flight
        - Executa a query, bota o resultado em DataFrame, salva em CSV dentro de tracks_dir
        - Em caso de exce√ß√£o, interceta-a, remove qualquer CSV parcial e relan√ßa para exitcode != 0
    """
    icao24 = flight["icao24"]
    callsign = flight["callsign"].strip()
    dep = flight["estdepartureairport"]
    arr = flight["estarrivalairport"]
    firstseen = int(flight["firstseen"])
    lastseen = int(flight["lastseen"])

    # Nome padr√£o para o CSV de state vectors deste voo
    filename = f"statevectors_{icao24}_{firstseen}_{lastseen}.csv"
    output_path = os.path.join(tracks_dir, filename)

    try:
        # 1) Obter cursor Trino
        cur = get_cursor()

        # 2) Gerar SQL
        sql = query_state_vectors_for_flight(icao24, firstseen, lastseen)

        # 3) Executar
        cur.execute(sql)
        rows = cur.fetchall()
        cols = [desc[0] for desc in cur.description]

        # 4) Construir DataFrame e salvar em CSV
        df = pd.DataFrame(rows, columns=cols)
        df.to_csv(output_path, index=False)

        logger.info("‚úîÔ∏è  Voo %s: state vectors salvos em %s", icao24, output_path)

    except Exception:
        # Se houve qualquer erro, remover CSV parcial (se existir) e relan√ßar exce√ß√£o para exitcode != 0
        logger.exception("‚ùå  Voo %s: falha ao extrair state vectors", icao24)
        if os.path.exists(output_path):
            os.remove(output_path)
        # relan√ßa para que o processo filho termine com c√≥digo != 0
        raise


def main():
    parser = argparse.ArgumentParser(
        description=(
            "Pega um CSV de voos (colunas: icao24,callsign,estdepartureairport,"
            "estarrivalairport,firstseen,lastseen,...) e, para cada linha, executa "
            "query_state_vectors_for_flight. Mant√©m tr√™s CSVs de controle: "
            "  ‚Ä¢ pendentes (o pr√≥prio CSV de entrada, que vai sendo reduzido)  "
            "  ‚Ä¢ completados  "
            "  ‚Ä¢ falhados"
        ),
        formatter_class=argparse.RawTextHelpFormatter,
    )
    parser.add_argument(
        "input_csv",
        type=str,
        help=(
            "Caminho para o CSV de entrada contendo as colunas:\n"
            "  icao24,callsign,estdepartureairport,estarrivalairport,firstseen,lastseen,..."
        ),
    )
    parser.add_argument(
        "--tracks_dir",
        type=str,
        default="tracks",
        help="Diret√≥rio onde ser√£o gravados os CSVs de state vectors (padr√£o: tracks/)",
    )
    parser.add_argument(
        "--completed_csv",
        type=str,
        default="completed.csv",
        help="CSV onde ser√£o acumulados voos processados com sucesso (padr√£o: completed.csv)",
    )
    parser.add_argument(
        "--failed_csv",
        type=str,
        default="failed.csv",
        help="CSV onde ser√£o acumulados voos que falharam (padr√£o: failed.csv)",
    )
    parser.add_argument(
        "--timeout",
        type=int,
        default=1800,
        help="Tempo m√°ximo (em segundos) por consulta (padr√£o: 1800 = 30 min)",
    )
    args = parser.parse_args()

    # 0) Verifica√ß√µes iniciais
    if not os.path.exists(args.input_csv):
        logger.error("CSV de entrada n√£o encontrado: %s", args.input_csv)
        sys.exit(1)

    # Certificar diret√≥rio de sa√≠da de tracks
    os.makedirs(args.tracks_dir, exist_ok=True)

    # 1) Carregar CSV de entrada (pendentes) numa lista de dicion√°rios
    df_input = pd.read_csv(args.input_csv, dtype=str)
    # Garantir que colunas m√≠nimas existam
    col_minimas = {
        "icao24",
        "callsign",
        "estdepartureairport",
        "estarrivalairport",
        "firstseen",
        "lastseen",
    }
    if not col_minimas.issubset(df_input.columns):
        logger.error(
            "O CSV de entrada deve conter pelo menos as colunas: %s", ", ".join(col_minimas)
        )
        sys.exit(1)

    # Converter cada linha em um dicion√°rio (para facilitar passagem ao processo filho)
    lista_voos = df_input.to_dict(orient="records")

    # 2) Se j√° existir um CSV de completed, carregue; caso contr√°rio, crie vazio
    if os.path.exists(args.completed_csv):
        df_completed = pd.read_csv(args.completed_csv, dtype=str)
    else:
        df_completed = pd.DataFrame(columns=df_input.columns)

    # 3) Se j√° existir um CSV de failed, carregue; caso contr√°rio, crie vazio
    if os.path.exists(args.failed_csv):
        df_failed = pd.read_csv(args.failed_csv, dtype=str)
    else:
        df_failed = pd.DataFrame(columns=df_input.columns)

    logger.info("Iniciando processamento de %d voos pendentes...", len(lista_voos))

    try:
        # 4) Iterar sobre cada voo na lista
        for i, voo in enumerate(lista_voos):
            icao24 = voo["icao24"]
            firstseen = voo["firstseen"]
            lastseen = voo["lastseen"]
            logger.info(
                "[%d/%d] Processando voo icao24=%s (firstseen=%s, lastseen=%s)...",
                i + 1,
                len(lista_voos),
                icao24,
                firstseen,
                lastseen,
            )

            # 4.1) Montar e iniciar um processo filho para executar o _processar_um_voo
            p = mp.Process(target=_processar_um_voo, args=(voo, args.tracks_dir))
            p.start()

            # 4.2) Aguardar at√© timeout (em segundos). Se passar de timeout, encerraremos o processo.
            p.join(timeout=args.timeout)
            if p.is_alive():
                # Ainda est√° rodando ap√≥s timeout ‚Üí consideramos ‚Äúfalha por timeout‚Äù
                p.terminate()
                p.join()
                logger.warning(
                    "‚è±  Voo %s: tempo limite de %d s atingido. Marcado como falha.",
                    icao24,
                    args.timeout,
                )
                # Adiciona ao DataFrame de falhados
                df_failed = pd.concat([df_failed, pd.DataFrame([voo])], ignore_index=True)

            else:
                # Se n√£o est√° mais vivo, verificar o exitcode
                if p.exitcode == 0:
                    logger.info("‚úÖ  Voo %s: processado com sucesso.", icao24)
                    df_completed = pd.concat([df_completed, pd.DataFrame([voo])], ignore_index=True)
                else:
                    logger.warning("‚ùå  Voo %s: processo filho falhou (exitcode=%d).", icao24, p.exitcode)
                    df_failed = pd.concat([df_failed, pd.DataFrame([voo])], ignore_index=True)

            # 4.3) Remover este voo do CSV de entrada (pendentes) em disco
            try:
                # Recarrega o CSV de pendentes (caso tenha sido atualizado em execu√ß√µes anteriores)
                df_atual = pd.read_csv(args.input_csv, dtype=str)
            except Exception:
                df_atual = pd.DataFrame(columns=df_input.columns)

            # Filtrar todas as linhas que N√ÉO sejam exatamente este voo, considerando icao24+firstseen+lastseen
            cond_remover = ~(
                (df_atual["icao24"] == voo["icao24"])
                & (df_atual["firstseen"] == voo["firstseen"])
                & (df_atual["lastseen"] == voo["lastseen"])
            )
            df_atual = df_atual[cond_remover]
            # Salvar o CSV de pendentes atualizado
            df_atual.to_csv(args.input_csv, index=False)

            # 4.4) Atualizar e gravar CSVs de completed e failed (sempre sobrescrever)
            df_completed.to_csv(args.completed_csv, index=False)
            df_failed.to_csv(args.failed_csv, index=False)

            # Pequena pausa opcional (evita sobrecarga de disco em la√ßos muito r√°pidos)
            # time.sleep(0.5)

        logger.info("üéâ Processamento conclu√≠do. N√£o h√° mais voos pendentes.")

    except KeyboardInterrupt:
        # Se o usu√°rio apertar Ctrl+C, interrompemos a itera√ß√£o imediatamente
        logger.info("‚ÅâÔ∏è  Interrompido pelo usu√°rio. Salvando estado atual e saindo...")
        # Antes de sair, j√° salvamos os CSVs (pendentes, completed e failed)
        # Os pendentes s√£o exatamente o que restou no arquivo args.input_csv,
        # pois j√° foi sendo atualizado a cada loop.
        # Os CSVs de completed e failed j√° foram salvos no loop ‚Äúfinally‚Äù abaixo.
        sys.exit(0)

    except Exception:
        # Qualquer outra exce√ß√£o n√£o prevista: logar e sair
        logger.exception("‚ùå  Ocorreu um erro inesperado. Gravando estado atual e abortando.")
        sys.exit(1)


if __name__ == "__main__":
    # Para garantir que o Ctrl+C mate tamb√©m os processos filhos imediatamente
    signal.signal(signal.SIGINT, signal.default_int_handler)
    main()
